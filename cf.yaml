# todo refactor split file
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  TagName:
    Type: String
    Default: auto-mute-us

  EC2AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Enter EC2 AMI ImageId.

  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: Enter EC2 AMI InstanceType.
  
  EC2KeyPairName:
    Type: String
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ''
    Description: Enter the name of an existing EC2 KeyPair to enable SSH access to the instance

  AutoMuteUsTag:
    Type: String
    Default: latest
    Description: Enter AutoMuteUs version
  
  GalactusTag:
    Type: String
    Default: latest
    Description: Enter Galactus version

  DiscordBotToken:
    Type: String
    MinLength: 1
    NoEcho: true
    ConstraintDescription: must be the discord bot token
    Description: REQUIRED Enter DiscodeBot Token

  ExternalPort:
    Type: Number
    MinValue: 1150
    MaxValue: 65535
    Default: 8123
    Description: Enter external port

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - EC2AmiId
          - EC2InstanceType
          - EC2KeyPairName
      - Label:
          default: AutoMuteUs Configration
        Parameters:
          - AutoMuteUsTag
          - GalactusTag
          - DiscordBotToken
          - ExternalPort
    ParameterLabels:
      EC2AmiId:
        default: "AmiId"
      EC2InstanceType:
        default: "InstanceType"
      EC2KeyPairName:
        default: "KeyPairName"
      AutoMuteUsTag:
        default: "AutoMuteUs version"
      GalactusTag:
        default: "Galactus version"
      DiscordBotToken:
        default: "[REQUIRED] DiscordBotToken"
      ExternalPort:
        default: "ExternalPort"

Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref EC2KeyPairName, '' ] ]

Outputs:
  PublicInstanceID:
    Description: The Instance Public IP
    Value: !GetAtt EC2Instance.PublicIp

Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: !Sub ${TagName}-VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${TagName}-Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${TagName}-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${TagName}-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # NetworkAcl:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags: 
  #       - Key: Name
  #         Value: !Sub ${TagName}-nacl

  # NetworkAclAssociation:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties: 
  #     NetworkAclId: !Ref  NetworkAcl
  #     SubnetId: !Ref PublicSubnet
  
  # NetworkAclEntryInbound:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties: 
  #     Egress: false
  #     RuleNumber: 100
  #     RuleAction: allow
  #     Protocol: -1
  #     CidrBlock: 0.0.0.0/0
  #     NetworkAclId: !Ref NetworkAcl

  # NetworkAclEntryOutbound:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties: 
  #     Egress: true
  #     RuleNumber: 100
  #     RuleAction: allow
  #     Protocol: -1
  #     CidrBlock: 0.0.0.0/0
  #     NetworkAclId: !Ref NetworkAcl
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access port 
      VpcId : !Ref VPC
      SecurityGroupIngress:
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # auto-mute-us
        - IpProtocol: tcp
          FromPort: !Ref ExternalPort
          ToPort: !Ref ExternalPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${TagName}-SecurityGroup
  
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2AmiId
      KeyName: 
        !If [ KeyPairNameProvided, !Ref EC2KeyPairName, !Ref 'AWS::NoValue' ]
      InstanceType: !Ref EC2InstanceType
      SubnetId : !Ref PublicSubnet
      PrivateIpAddress: 10.0.1.10
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${TagName}-Instance
      # todo chenge AWS::CloudFormation::Init:
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          tag="[SETUP]"

          echo "${!tag} UPDATE: yum"
          sudo yum -y update

          echo "${!tag} INSTALL: docker git"
          sudo yum install -y docker git

          echo "${!tag} SETUP: docker"
          sudo systemctl start docker
          sudo usermod -a -G docker ec2-user
          sudo systemctl enable docker

          echo "${!tag} INSTALL: docker-compose"
          version=`curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | sed -e 's/[^0-9\.]//g'`
          sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

          echo "${!tag} SETUP: adding permission all user to execute docker-compose"
          sudo chmod +x /usr/local/bin/docker-compose

          echo "${!tag} MOVE: chenge directory /"
          cd /

          echo "${!tag} CLONING: auto-mute-us"
          git clone https://github.com/denverquane/automuteus.git

          echo "${!tag} MOVE: chenge directory /automuteus"
          cd /automuteus

          echo "${!tag} SETUP: automuteus .env"
          public_ip=`curl -s http://169.254.169.254/latest/meta-data/public-ipv4`
          cat sample.env | sed \
            -e "s/^AUTOMUTEUS_TAG=/AUTOMUTEUS_TAG=${AutoMuteUsTag}/" \
            -e "s/^GALACTUS_TAG=/GALACTUS_TAG=${GalactusTag}/" \
            -e "s/^DISCORD_BOT_TOKEN=/DISCORD_BOT_TOKEN=${DiscordBotToken}/" \
            -e "s/^GALACTUS_HOST=/GALACTUS_HOST=http:\/\/${!public_ip}:${ExternalPort}/" \
            -e "s/^GALACTUS_EXTERNAL_PORT=/GALACTUS_EXTERNAL_PORT=${ExternalPort}/" \
            -e "s/^BROKER_PORT=8123/BROKER_PORT=${ExternalPort}/" \
            > ./.env
          
          echo "${!tag} START: dcoker-compose"
          docker-compose up -d
              
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT5M
    
    # Metadata:
    #   AWS::CloudFormation::Init:
    #     config:
    #       configSets:
    #             ec2_bootstrap:
    #                 - install_docker
    #                 # - install_compose
    #       install_docker:
    #         packages:
    #           yum:
    #             docker: []
    #         services:
    #           sysvinit:
    #             docker:
    #               enabled: "true"
    #               ensureRunning: "true"
    #         commands:
    #           docker_for_ec2_user:
    #             command: usermod -a -G docker ec2-user
      # UserData: !Base64 
      #   Fn::Sub: |
      #     #!/bin/bash
      #     # Get the latest CloudFormation package
      #     yum update -y aws-cfn-bootstrap
      #     # Install the files and packages from the metadata
      #     /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      #     # Signal the status from cfn-init
      #     /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} 